#!/usr/bin/env python3
# Generated by the SARL compiler the Thu Oct 13 20:12:36 CEST 2022. Do not change this file.

from io.sarl.core import OpenEventSpaceSpecification
from io.sarl.lang.core import Address
from io.sarl.lang.core import Agent

class PingAgent(Agent,object):
	def __on_Initialize__(self, occurrence):
		class __Jclosure_Procedure1(,object):
			def apply(self, it):
				if (self.getDefaultSpace().getNumberOfStrongParticipants() > 1):
					e = PingEvent(0)
					.println(u"Sending intial ping event")
					self.emit(self.spc, e)
					self.cancel(tsk)
				else:
					.println(u"I am alone in this space")
		(self.spc = self.getDefaultContext().getOrCreateSpaceWithSpec(OpenEventSpaceSpecification, .fromString(str(.get(occurrence.parameters, 0)))))
		self.spc.registerStrongParticipant(self.asEventListener())
		tsk = self.task(u"pongwait")
		.println(self.getDefaultSpace().getNumberOfStrongParticipants())
		self.every(tsk, 1000, __Jclosure_Procedure1())
	def __on_PongEvent__(self, occurrence):
		class __Jclosure_(Address)=>boolean((Address)=>bool,object):
			def matches(self, it):
				(it == occurrence.getSource())
		.println(u"Received pong event")
		e = PingEvent((occurrence.index + 1))
		self.emit(self.spc, e, __Jclosure_(Address)=>boolean())
	def __guard_io_sarl_core_Initialize__(self, occurrence):
		it = occurrence
		__event_handles = list
		__event_handles.add(__on_Initialize__)
		return __event_handles
	
	def __guard_PongEvent__(self, occurrence):
		it = occurrence
		__event_handles_1 = list
		__event_handles_1.add(__on_PongEvent__)
		return __event_handles_1
	def __init__(self):
		self.spc = None