#!/usr/bin/env python3
# Generated by the SARL compiler the Sun Oct 23 23:37:02 CEST 2022. Do not change this file.

from io.sarl.core import OpenEventSpaceSpecification
from io.sarl.lang.core import Address
from io.sarl.lang.core import Agent

from PingEvent import PingEvent

import uuid


class PingAgent(Agent, object):
    def __on_Initialize__(self, occurrence):
        class __Jclosure_Procedure1(object):
            def apply(self, it):
                if self.getDefaultSpace().getNumberOfStrongParticipants() > 1:
                    e = PingEvent(0)
                    print(u"Sending intial ping event")
                    self.emit(self.spc, e)
                    self.cancel(tsk)
                else:
                    print(u"I am alone in this space")

        self.spc = self.getDefaultContext().getOrCreateSpaceWithSpec(OpenEventSpaceSpecification,
                                                                     uuid.UUID(str(occurrence.parameters[0])))
        self.spc.registerStrongParticipant(self.asEventListener())
        tsk = self.task(u"pongwait")
        print(self.getDefaultSpace().getNumberOfStrongParticipants())
        self.every(tsk, 1000, __Jclosure_Procedure1())

    def __on_PongEvent__(self, occurrence):
        class __Jclosure_(Address):
            def matches(self, it):
                return it == occurrence.getSource()

        print(u"Received pong event")
        e = PingEvent((occurrence.index + 1))
        self.emit(self.spc, e, __Jclosure_(Address))

    def __guard_io_sarl_core_Initialize__(self, occurrence):
        it = occurrence
        __event_handles = list()
        __event_handles.append(self.__on_Initialize__)
        return __event_handles

    def __guard_PongEvent__(self, occurrence):
        it = occurrence
        __event_handles_1 = list()
        __event_handles_1.append(self.__on_PongEvent__)
        return __event_handles_1

    def __init__(self):
        self.spc = None
