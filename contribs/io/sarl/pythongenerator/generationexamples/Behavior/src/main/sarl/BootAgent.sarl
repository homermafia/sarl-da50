import io.sarl.core.Initialize
import io.sarl.core.Logging
import io.sarl.core.Behaviors
import io.sarl.core.Destroy
import io.sarl.lang.core.Agent

// behaviour with attributes and methods
behavior beh1 {
	protected var a = 4 // variable
	protected val b = 10 // constant

	uses Logging

	// Defining an action without parameter nor return type
	def myAction1 {
		info("Hello world")
	}
	// Defining an action with a variadic parameter and no return type
	def myAction2(param : int*) {
		info("params are " + param)
		info("size of params is " + param.size)
		info("first param is " + param.get(0))
		var s: int = 0
		for (var i: int = 0; i < param.size; i++) {
			s += param.get(i)
		}
		info("sum of params is " + s)
	}
}

// behaviour that extends another behavior (WARNING: can only extend one beheviour)
behavior beh2 extends beh1 {
	uses Logging
	
	def action {
		info(a + b)
	}
}

// behaviour with initialization handlers
behavior beh3 {
	uses Logging
	
	on Initialize {
		info("I'm initializing my behavior")
	}

	on Destroy {
		info("Destroying the behavior")
	}
}

capacity c {
	def dothing(thing: int)
}

skill s implements c {
	def dothing(thing: int) {
		println("hello")
	}
}

// behaviour that assigns a skill to its associated agent
behavior beh4 {
	new(owner : Agent) {
		super(owner)
		var sk = new s
		println("setting skill")
		setSkill(sk)
		println("skill set")
	}
	
	on Initialize {
		println("behaviour initialized")
	}
}

// agent using behaviour
agent BootAgent {
	uses Behaviors
	
	var beh: beh4
	var behavior1: beh1
	
	on Initialize {
		beh = new beh4(this) // <- the parameter is the agent
		registerBehavior(beh) // <- triggers the on Initialize event of the behaviour
		
		behavior1 = new beh1(this)
		registerBehavior(behavior1)

		behavior1.myAction1()
		behavior1.myAction2(1, 7, 6, 7)
	}
	
	on Destroy {
		// never forget to unregister behavior uppon destroying an agent
		unregisterBehavior(beh)
		unregisterBehavior(behavior1)
	}
}